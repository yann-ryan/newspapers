{
  "hash": "72583ec0a917943698ca1cf72d539de9",
  "result": {
    "markdown": "# Accessing Newspaper Data from the Shared Research Repository {#sec-download}\n\nMost of the rest of this book uses newspaper data from a number of newspaper digitisation projects connected to the British Library, as written about in [Chapter -@sec-sources]. These projects have made the 'raw data' for a number of titles freely available for anyone to use. This chapter explains the structure of the repository which holds them, and walks through a method for downloading titles in bulk.\n\n## Shared Research Repository\n\nThe titles released so far are available on the British Library's [Shared Research Repository](https://bl.iro.bl.uk/).\n\nThe items in the repository are organised into collections. All the newspaper-related data released on to the repository can be found within the [British Library News Datasets](https://bl.iro.bl.uk/collections/353c908d-b495-4413-b047-87236d2573e3?locale=en) collection. Clicking on this link will bring up a list of all the items collected under this headings. There are also three sub-headings: [Title Lists](https://bl.iro.bl.uk/collections/b5730a9d-d871-43ee-9966-c36ed3acad74?locale=en), [Newspapers](https://bl.iro.bl.uk/collections/9a6a4cdd-2bfe-47bb-8c14-c0a5d100501f?locale=en), and [Press Directories](https://bl.iro.bl.uk/collections/580fe312-0e41-41fc-bb38-40122798cec1?locale=en). Clicking on the first of these, [Newspapers](https://bl.iro.bl.uk/collections/9a6a4cdd-2bfe-47bb-8c14-c0a5d100501f?locale=en), will display just the newspaper data items.\n\n![Screenshot showing the Shared Research Repository maintained by the British Library, on the newspaper collections page.](images/repo.png)\n\n### Newspaper File Structure\n\nEach separate title (if a newspaper changed title, they are combined together) is listed here as a dataset. Clicking into one of these, you'll see that each year of that title is available as a separate downloadable .zip file.\n\nIf you download one of these and decompress it, you'll see the structure of the title. It contains a root folder, containing the name and year of the title, as well as a unique title code. Contained within this folder are further folders, one for each day of the newspaper. These folders are named using the month and day of publication.\n\nWithin this folder are the actual newspaper files: one .xml file for each page of that day's paper, plus one more METS file.\n\n![Screenshot showing the folder structure of a decompressed newspaper-year file](images/folders.png)\n\n## Downloading Titles in Bulk\n\nAcquiring a dataset on which to work can be cumbersome if you have to manually download each file. The first part of this tutorial will show you how to bulk download all or some of the available titles. This was heavily inspired by the method found [here](https://github.com/Living-with-machines/hmd_newspaper_dl). If you want to bulk download titles using a more robust method (using the command line, so no need for R), then I really recommend checking out that repository.\n\nTo do this there are three basic steps:\n\n-   Make a list of all the links in the repository collection for each title\n-   Go into each of those title pages, and get a list of all links for each zip file download.\n-   Optionally, you can specify which titles you'd like to download, or even which year.\n-   Download all the relevant files to your machine.\n\n### Create a dataframe of all the newspaper files in the repository\n\nFirst, load the libraries needed:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(XML)\nlibrary(xml2)\nlibrary(rvest)\n```\n:::\n\n\n\nNext, grab all the pages of the collection:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nurls = paste0(\"https://bl.iro.bl.uk/collections/9a6a4cdd-2bfe-47bb-8c14-c0a5d100501f?locale=en&page=\",1:6)\n```\n:::\n\n\n\nUse `lapply` to go through the list, use the function `read_html` to read the page into R, and store each as an item in a list:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist_of_pages <- lapply(urls, read_html)\n```\n:::\n\n\n\nNext, write a function that takes a single html page (as downloaded with `read_html`), extracts the links and newspaper titles, and puts it into a dataframe.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmake_df = function(x){\n  \n  all_collections =  x %>% \n  html_nodes(\".search-result-title\") %>% \n  html_nodes('a') %>% \n  html_attr('href') %>% \n  paste0(\"https://bl.iro.bl.uk\",.)\n\nall_collections_titles = x %>% \n  html_nodes(\".search-result-title\") %>% \n  html_text()\n\nall_collections_df = tibble(all_collections, all_collections_titles) %>% \n  filter(str_detect(all_collections, \"concern\\\\/datasets\"))\n\nall_collections_df\n\n}\n```\n:::\n\n\n\nRun this function on the list of html pages. This will return a list of dataframes. Merge them into one with `rbindlist` from `data.table`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nl = purrr::map(list_of_pages, make_df)\n\nl = data.table::rbindlist(l)\nl %>% knitr::kable('html')\n\nl = l %>% mutate(pages = paste0(all_collections, \"&page=\")) \n\nsequence <- 1:10\n\n# Expand the dataframe and concatenate with the sequence\nexpanded_df <- l %>%\n  crossing(sequence) %>%\n  mutate(pages = paste(pages, sequence, sep = \"\"))\n```\n:::\n\n\n\nNow we have a dataframe containing the url for each of the titles in the collection. The second stage is to go to each of these urls and extract the relevant download links.\n\nWrite another function. This takes a url, extracts all the links and IDs within it, and turns it into a dataframe. It then filters to just the relevant links (which have the ID 'file_download').\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_collection_links = function(c){\n  tryCatch({\ncollection = c  %>%  read_html()\n  \nlinks = collection%>% html_nodes('a') %>% html_attr('href')\n\nid = collection %>% html_nodes('a') %>% html_attr('id')\n\ntext = collection%>% html_nodes('a') %>% html_attr('title')\n\nlinks_df = tibble(links, id, text)\n\n}, error = function(e) {\n    # Action to perform when an error occurs\n    result <- NA\n  })\n\nreturn(links_df)\n\n\n\n}\n```\n:::\n\n\n\nUse `lapply` to run this function on the column of urls from the previous step,and merge it with `rbindlist`. Keep just links which contain the text `Download BLNewspapers`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nt = pbapply::pblapply(expanded_df$pages, get_collection_links)\n\nnames(t) = expanded_df$all_collections_titles[1]\n\nt_df = t %>%\n  data.table::rbindlist(idcol = 'title') \n\nt_df = t_df %>% \n  filter(str_detect(text, \"BLNewspapers\"))\n```\n:::\n\n\n\nThe new dataframe needs a bit of tidying up. To use the `download.file()` function in R we need to also specify the full filename and location where we'd like the file to be put. At the moment the 'text' column is what we want but it needs some alterations. First, remove the 'Download' text from the beginning.\n\nNext, separate the text into a series of columns, using either \\_ or . as the separator. Create a new 'filename' column which pastes the different bits of the text back together without the long code.\n\nAdd `/newspapers/` to the beginning of the filename, so that the files can be downloaded into that folder.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nt_df = t_df %>% distinct(text, .keep_all = TRUE) %>% \n  mutate(year = str_extract(text, \"(?<=_)[0-9]{4}(?=[_.])\")) %>% \n  mutate(nid = str_extract(text, \"[0-9]{7}\")) %>% mutate(filename = str_extract(text, '(?<=Download \")[^\"]+'))\n\nt_df = t_df %>% mutate(links = paste0(\"https://bl.iro.bl.uk\",links )) %>% \n  mutate(destination = paste0('/Users/Yann/Documents/non-Github/r-newspaper-quarto/newspapers/', filename))\n```\n:::\n\n\n\nThe result is a dataframe which can be used to download either all or some of the files.\n\n### Filter the download links by date or title\n\nYou can now filter this dataframe to produce a list of titles and/or years you're interested in. For example, if you just want all the newspapers for 1855:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfiles_of_interest = t_df %>% filter(as.numeric(year) == 1855)\nfiles_of_interest%>% knitr::kable('html')\n```\n:::\n\n\n\nTo download these we use the `Map` function, which will apply the function `download.file` to the vector of links, using the dest colum we created as the file destination. `download.file` by default times out after 100 seconds, but these downloads will take much longer. Increase this using `options(timeout=9999)`.\n\nBefore this step, you'll need to create a new folder called 'newspapers', within the working directory of the R project.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(timeout=9999)\n\nMap(function(u, d) download.file(u, d, mode=\"wb\"), files_of_interest$links, files_of_interest$dest)\n```\n:::\n\n\n\n### Folder structure\n\nOnce these have downloaded, you can quickly unzip them using R. First it's worth understanding a little about the folder structure you'll see once they're unzipped.\n\nEach file will have a filename like this:\n\nBLNewspapers_TheSun_0002194_1850.zip\n\nThis is made from the following pieces of information:\n\nBLNewspapers - this identifies the file as coming from the British Library\n\nTheSun - this is the title of the newspaper, as found on the Library's catalogue.\n\n0002194 - This is the *NLP*, a unique code given to each title. This code is also found on the [Title-level list](https://doi.org/10.23636/1136), in case you want to link the titles from the repository to that dataset.\n\n1850 - The year.\n\n## Contruct a Corpus\n\nAt this point, and for the rest of the tutorials in the book, you might want to construct a 'corpus' of newspapers, using whatever criteria you see fit. Perhaps you're interested in a longitudinal study, and would like to download a small sample of years spread out over the century, or maybe you'd like to look at all the issues in a single newspaper, or perhaps all of a single year across a range of titles.\n\nThe tutorials will make most sense and produce similar results if your corpus is the same as above: all newspapers in the repository from the year 1855. You can also download a single .zip file with the extracted text from these titles here.\n\n## Bulk extract the files using unzip() and a for() loop\n\nR can be used to unzip the files in bulk, which is particularly useful if you have downloaded a large number of files. It's very simple, there's just two steps. This is useful if you're using windows and have a large number of files to unzip.\n\nFirst, use `list.files()` to create a vector, called `zipfile` containing the full file paths to all the zip files in the 'newspapers' folder you've just created.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nzipfiles = list.files(\"/Volumes/T7/zipfiles/\", full.names = TRUE)\nzipfiles\n```\n:::\n\n\n\nNow, use this in a loop with `unzip()`.\n\nLoops in R are very useful for automating simple tasks. The below takes each file named in the 'zipfiles' vector, and unzips it. It takes some time.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npurrr::map(zipfiles, unzip)\n```\n:::\n\n\n\nOnce this is done, you'll have a new (or several new) folders in the *project* directory (not the newspapers directory). These are named using a numeric code, called the 'NLP', so they should look like this in your project directory:\n\nTo tidy up, put these **back** into the **newspapers** folder.\n\nThese files contain the METS/ALTO .xml files with the newspaper text. If you have followed the above and downloaded all newspapers for the year 1855, you should have seven different titles and a few hundred newspaper issues. In the next chapter, you'll extract this text from the .xml and save it in a more convenient format. These final files will form the basis for the following tutorials which process and analyse the text of the newspapers.\n",
    "supporting": [
      "download-and-unzip_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}