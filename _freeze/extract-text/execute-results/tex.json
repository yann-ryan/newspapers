{
  "hash": "f081a2454eaeff437abd153fe0f5fcb4",
  "result": {
    "markdown": "# Make a Text Corpus {#sec-extract}\n\nUnforunately, downloading the titles as explained in [Chapter -@sec-download] is not the final step in having newspaper data to run analysis on. If you download and extract a single .zip file, you'll see the newspapers themselves are not simply a set of text files ready to use.\n\nFirst of all, each issue is contained within its own folder, named by its day and month of publication. For example, an issue published on the first of January 1850 will be contained in a folder called 0101. Within this folder 0101, you'll see some more files. These are the METS/ALTO files produced by the OCR process. They are the output which contains the text of the newspapers, but also detailed information on the layout and sections of the newspapers.\n\nMost typical computational or digital humanities uses, such as counting word frequencies or generating word embeddings, will ultimately expect plain text as the input. Therefore, the first stage of using this data is to extract the plain text from the complicated structure of the METS/ALTO. This chapter presents one way of doing this, directly through R. There is also an existing tool called Alto2Text, created by the Living with Machines project, which will do the same in a quicker and more robust way.\n\nIn the British Library, the METS file contains information on *textblocks*. Each textblock has a code, which can be found in one of the ALTO files - of which there are one per page. The ALTO files list each individual word in each textblock. The METS file also contains information on which textblocks make up each article, which means that the newspaper can be recreated, article by article. The output will be a csv for each issue - these can be combined into a single dataframe afterwards, but it's nice to have the .csv files themselves first of all.\n\n## Folder structure\n\nDownload and extract the newspapers you're interested in, and put them in the same folder as the project you're working on in R.\n\nThe folder structure of the newspapers is \\[nlp\\]-\\>year-\\>issue month and day-\\> xml files. The nlp is a unique code given to each digitised newspaper. This makes it easy to find an individual issue of a newspaper.\n\nLoad some libraries: all the text extraction is done using tidyverse and furrr for some parallel programming.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrequire(furrr)\nrequire(tidyverse)\nlibrary(tidytext)\nlibrary(purrr)\n```\n:::\n\n\n\nThere are two main functions: `get_page()`, which extracts words and their corresponding textblock, and `make_articles()`, which extracts a table of the textblocks and corresponding articles, and joins them to the words from `get_page()`. get_page() also cleans up the text, removing words in super and sub-script, for example. This is because within the .xml, these words are duplicated so can be safely removed. It also replaces the .xml which indicates split words, with a hyphen.\n\nHere's `get_page()`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_page = function(alto){\n page = alto %>%  read_file() %>%\n        str_split(\"\\n\", simplify = TRUE) %>% \n        keep(str_detect(., \"CONTENT|<TextBlock ID=\")) %>% \n        str_extract(\"(?<=CONTENT=\\\")(.*?)(?=WC)|(?<=<TextBlock ID=)(.*?)(?= HPOS=)\")%>% \n        discard(is.na) %>% \n    as.tibble() %>%\n    mutate(pa = ifelse(str_detect(value, \"pa[0-9]{7}\"), \n                       str_extract(value, \"pa[0-9]{7}\"), NA)) %>% \n    fill(pa) %>%\n    filter(str_detect(pa, \"pa[0-9]{7}\")) %>% \n    filter(!str_detect(value, \"pa[0-9]{7}\"))%>% \n   mutate(value = str_remove_all(value, \n                                 \"STYLE=\\\"subscript\\\" \")) %>% \n   mutate(value = str_remove_all(value, \n                                 \"STYLE=\\\"superscript\\\" \"))%>% \n   mutate(value = str_remove_all(value,\n                                 \"\\\"\")) %>%\n   mutate(value = str_replace_all(value,\n                                 ' SUBS_TYPE=HypPart1 SUBS_CONTENT=.*', '-'))%>%\n   mutate(value = str_remove_all(value,\n                                 ' SUBS_TYPE=HypPart2 SUBS_CONTENT=.*'))\n}\n```\n:::\n\n\n\nIf you want to understand how it works, I have broken the function down into components below.\n\nFirst read the alto page, which should be an argument to the function. Here's one page to use as an example:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nalto = \"newspapers/0002194/1855/0101//0002194_18550101_0001.xml\"\n\naltofile = alto %>%  read_file()\n```\n:::\n\n\n\nSplit the file on each new line, resulting in a character vector of the length of the number of lines in the page:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\naltofile = altofile %>%\n        str_split(\"\\n\", simplify = TRUE)\n\naltofile %>% glimpse()\n```\n:::\n\n\n\nJust keep lines which contain either a `CONTENT` or `TextBlock` tag. This\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\naltofile = altofile %>% keep(str_detect(., \"CONTENT|<TextBlock ID=\"))\n\naltofile %>% glimpse()\n```\n:::\n\n\n\nTurn it into a dataframe (a tibble in this case):\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\naltofile = altofile %>% \n  str_extract(\"(?<=CONTENT=\\\")(.*?)(?=WC)|(?<=<TextBlock ID=)(.*?)(?= HPOS=)\") %>% \n        #discard(is.na) %>% \n  as_tibble()\n\naltofile %>% head(20)\n```\n:::\n\n\n\nThis dataframe has a single column, containing every textblock, textline and word in the ALTO file. Now we need to extract the textblock IDs, put them in a separate column, and then fill() each textblock ID down until it reaches the next one.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\naltofile = altofile %>% \n  mutate(pa = ifelse(str_detect(value,\n                                \"pa[0-9]{7}\"),\n                     str_extract(value, \"pa[0-9]{7}\"), NA)) %>% \n    fill(pa)\n```\n:::\n\n\n\nThe final step removes the textblock IDs from the column which should contain only words, and cleans up some .xml tags we don't want:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\naltofile = altofile %>%\n    filter(str_detect(pa, \"pa[0-9]{7}\")) %>% \n    filter(!str_detect(value, \"pa[0-9]{7}\"))%>% \n   mutate(value = str_remove_all(value, \n                                 \"STYLE=\\\"subscript\\\" \")) %>% \n   mutate(value = str_remove_all(value, \n                                 \"STYLE=\\\"superscript\\\" \"))%>% \n   mutate(value = str_remove_all(value,\n                                 \"\\\"\")) %>%\n   mutate(value = str_replace_all(value,\n                                 ' SUBS_TYPE=HypPart1 SUBS_CONTENT=.*', '-'))%>%\n   mutate(value = str_remove_all(value,\n                                 ' SUBS_TYPE=HypPart2 SUBS_CONTENT=.*'))\n```\n:::\n\n\n\nThe final output is a dataframe with individual words on one side and the text block IDs on the other.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(altofile)\n```\n:::\n\n\n\nThis is the second function:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmake_articles <- function(foldername){\n    \n  files <- list.files(foldername, full.names = TRUE)\n  \n  csv_files_exist <- any(xfun::file_ext(files) == \"csv\")\n  \n  if (!csv_files_exist) {\n  \n   metsfilename =  str_match(list.files(path = foldername, \n                                        all.files = TRUE, \n                                        recursive = TRUE, \n                                        full.names = TRUE),\n                             \".*mets.xml\") %>%\n     discard(is.na)\n    \n    csvfoldername = metsfilename %>% str_remove(\"_mets.xml\")\n    \n    metsfile = read_file(metsfilename)\n    \n    page_list =  str_match(list.files(path = foldername, \n                                      all.files = TRUE, \n                                      recursive = TRUE, \n                                      full.names = TRUE), \n                           \".*[0-9]{4}.xml\") %>%\n    discard(is.na)\n    \n    \n    \n        metspagegroups = metsfile %>% \n          str_split(\"<mets:smLinkGrp>\")%>%\n    flatten_chr() %>%\n    as_tibble() %>% \n          filter(str_detect(value, '#art[0-9]{4}')) %>% \n          mutate(articleid = str_extract(value,\"[0-9]{4}\")) \n\n    \n     t = future_map(page_list, get_page) \n     t = t[sapply(t, nrow) > 0]\n     t %>% \n       bind_rows()  %>%\n       left_join(extract_page_groups(metspagegroups$value) %>% \n                                    unnest() %>% \n        mutate(art = ifelse(str_detect(id, \"art\"), \n                            str_extract(id, \"[0-9]{4}\"), NA)) %>% \n        fill(art) %>% \n          filter(!str_detect(id, \n                             \"art[0-9]{4}\")),\n        by = c('pa' = 'id')) %>% \n      group_by(art) %>% \n      summarise(text = paste0(value, collapse = ' ')) %>% \n       mutate(issue_name = metsfilename ) %>%\n       write_csv(path = paste0(csvfoldername, \".csv\"))\n     \n  } else {\n    message(cat(\"Skipping folder:\", foldername, \"- .csv files already exist.\\n\"))\n  }\n\n\n}\n```\n:::\n\n\n\nIt's a bit more complicated, and a bit of a fudge. Because there are multiple ALTO pages for one METS file, we need to read in all the ALTO files, run our `get_pages()` function on them within *this* function, bind them altogether, and then join that to a METS file which contains an article ID and all the corresponding textBlocks. Again, if you're interested, the function has been broken down into components below. You can ignore this section if you just want to run the function and extract text from your own files.\n\nThe function takes an argument called 'foldername'. This folder should correspond to the folders within the downloaded newspaper files from the BL repository. Later, we can pass a *list* of folder names to the function using `lapply()` or `future_map()`, and it will run the function on each folder in turn.\n\nThis is how it works with a single folder:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfoldername = \"newspapers/0002194/1855/0101/\"\n```\n:::\n\n\n\nUsing the folder name as the last part of the file path, and then a regular expression to get only a file ending in mets.xml, this will get the correct METS file name and read it into memory:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmetsfilename =  str_match(list.files(path = foldername, all.files = TRUE, recursive = TRUE, full.names = TRUE), \".*mets.xml\") %>%\n    discard(is.na)\n\nmetsfilename\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmetsfile = read_file(metsfilename)\n```\n:::\n\n\n\nWe also need to call the .csv (which we're going to have as an output) a unique name:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncsvfoldername = metsfilename %>% str_remove(\"_mets.xml\")\n```\n:::\n\n\n\nNext we have to grab all the ALTO files in the same folder, using the same method:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npage_list =  str_match(list.files(path = foldername, all.files = TRUE, recursive = TRUE, full.names = TRUE), \".*[0-9]{4}.xml\") %>%\n    discard(is.na)\n```\n:::\n\n\n\nNext we need the file which lists all the pagegroups and corresponding articles.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmetspagegroups = metsfile %>% \n  str_split(\"<mets:smLinkGrp>\") %>%\n    flatten_chr() %>%\n    as_tibble() %>% \n  filter(str_detect(value, '#art[0-9]{4}')) %>% \n  mutate(articleid = str_extract(value,\"[0-9]{4}\"))\n```\n:::\n\n\n\nThe next bit uses a function written by brodrigues called extractor()\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nextractor <- function(string, regex, all = FALSE){\n    if(all) {\n        string %>%\n            str_extract_all(regex) %>%\n            flatten_chr() %>%\n            str_extract_all(\"[:alnum:]+\", simplify = FALSE) %>%\n            purrr::map(paste, collapse = \"_\") %>%\n            flatten_chr()\n    } else {\n        string %>%\n            str_extract(regex) %>%\n            str_extract_all(\"[:alnum:]+\", simplify = TRUE) %>%\n            paste(collapse = \" \") %>%\n            tolower()\n    }\n}\n```\n:::\n\n\n\nWe also need another function which extracts the correct pagegroups:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nextract_page_groups <- function(article){\n\n    id <- article %>%\n        extractor(\"(?<=<mets:smLocatorLink xlink:href=\\\"#)(.*?)(?=\\\" xlink:label=\\\")\", \n                  all = TRUE)\n\n    type = \n    tibble::tribble(~id,\n                    id) \n}\n```\n:::\n\n\n\nNext this takes the list of ALTO files, and applies the get_page() function to each item, then binds the four files together vertically. I'll give it a random variable name, even though it doesn't need one in the function because we just pipe it along to the csv.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nt = future_map(page_list, get_page)\nt = t[sapply(t, nrow) > 0]\nt = t %>% \n  bind_rows()\n\nhead(t)\n```\n:::\n\n\n\nThis extracts the page groups from the mets dataframe we made, and turns it into a dataframe with the article ID as a number, again extracting and filtering using regular expressions, and using fill(). The result is a dataframe of every word, plus their article and text block.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nt = t %>%\n  left_join(extract_page_groups(metspagegroups$value) %>% \n                                    unnest() %>% \n        mutate(art = ifelse(str_detect(id, \"art\"), \n                            str_extract(id, \n                                        \"[0-9]{4}\"), NA))%>% \n          fill(art), \n        by = c('pa' = 'id')) %>% \n  fill(art)\n        \nhead(t, 50)\n```\n:::\n\n\n\nNext we use summarise() and paste() to group the words into the individual articles, and add the mets filename so that we also can extract the issue date afterwards.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n t = t %>% \n    group_by(art) %>% \n  summarise(text = paste0(value, collapse = ' ')) %>% \n       mutate(issue_name = metsfilename ) \n\nhead(t, 10)\n```\n:::\n\n\n\nAnd finally write to .csv using the csvfoldername we created:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nt %>%\n       write_csv(path = paste0(csvfoldername, \".csv\"))\n```\n:::\n\n\n\nTo run it on a bunch of folders, you'll need to make a list of paths to all the issue folders you want to process. You can do this using `list_dirs`. You *only* want these final-level issue folders, otherwise it will try to work on an empty folder and give an error. This means that if you want to work on multiple years or issues, you'll need to figure out how to pass a list of just the issue level folder paths.\n\nIn this case, I used the package `fs`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(fs)\n\n\nget_all_deepest_folders <- function(folder_path) {\n  if (!file.exists(folder_path) || !file.info(folder_path)$isdir) {\n    stop(\"Invalid folder path or folder does not exist.\")\n  }\n\n  find_deepest_folders_recursive <- function(dir_path) {\n    subdirs <- list.dirs(dir_path, full.names = TRUE, recursive = FALSE)\n    \n    if (length(subdirs) == 0) {\n      return(dir_path)\n    }\n    \n    deepest_subdirs <- character(0)\n    for (subdir in subdirs) {\n      deepest_subdirs <- c(deepest_subdirs, find_deepest_folders_recursive(subdir))\n    }\n    \n    return(deepest_subdirs)\n  }\n  \n  deepest_folders <- find_deepest_folders_recursive(folder_path)\n  return(unique(deepest_folders))\n}\n\n\n\n\n\n\nstarting_folder <- \"../../../Downloads/TheSun_sample/\"\ndeepest_folders <- get_all_deepest_folders(starting_folder)\n```\n:::\n\n\n\nFinally, this applies the function make_articles() to everything in the folderslist vector. It will write a new .csv file into each of the folders, containing the article text and codes. You can add whatever folders you like to a vector called folderlist, and it will generate a csv of articles for each one.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfuture_map(deepest_folders, make_articles, .progress = TRUE)\n```\n:::\n\n\n\nIt's not very fast (I think it can take 10 or 20 seconds per issue, so bear that in mind), but *eventually* you should now have a .csv file in each of the issue folders, with a row per line.\n\nThese .csv files can be re-imported and used for text mining tasks such as:\n\n-   word frequency count\n-   tf-idf scores\n-   sentiment analysis\n-   topic modelling\n-   text reuse\n",
    "supporting": [
      "extract-text_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}