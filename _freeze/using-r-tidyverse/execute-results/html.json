{
  "hash": "b9f869972fd2e71fbba0626df4c97986",
  "result": {
    "markdown": "# Using R and the tidyverse {#sec-tidyverse}\n\nR is a programming language, much like Python. It is widely used by data scientists, those using digital humanities techniques, and in the social sciences.\n\nIt has some advantages for a novice to programming. Its widely-used platform (called an Integrated Programming Environment- an IDE) for the language called [R-Studio](https://posit.co/download/rstudio-desktop/) makes it relatively easy for beginners. A lot of this is because of developers who have extended the functionality of the base language greatly, particularly a suite of extra functions known collectively as the 'tidyverse'.\n\nThe methods section of this book may be challenging if you are a complete beginner to R and have not learned any other programming language. If you'd like to get started with R and the tidyverse in earnest, the canonical texts is [R for Data Science](https://r4ds.had.co.nz), written by Hadley Wickham.\n\n## Getting started\n\nThe only requirements to get through these tutorials are to install R and R-Studio, as well as some data which needs to be downloaded separately.\n\n### Download R and R-Studio\n\nR and R-Studio are two separate things. R will work without R-studio, but not the other way around, and so it should be downloaded first. Go to the [download](https://www.r-project.org) page, select a download mirror, and download the correct version for your operating system. Follow the [installation instructions](https://cran.r-project.org/manuals.html) if you get stuck.\n\nNext, [download R-Studio](https://posit.co/products/open-source/rstudio/). You'll want the desktop version and again, download the correct version and follow the instructions. When both of these are installed, open R-Studio, and it should run the underlying software R automatically.\n\nAt this point, I would highly recommend reading a beginners guide to R and R-studio, such as [this one](https://moderndive.netlify.com/1-getting-started.html), to familiarise yourself with the layout and some of the basic functionality of R-Studio. Once you understand where to type and save code, where your files and dataframes live, and how to import data from spreadsheets, you should be good to start experimenting with newspaper data.\n\nR relies on lots of additional packages for full functionality, and you'll need to install these by using the function `install.packages()`, followed by the package name, in inverted commas. I recommend doing this to install the tidyverse suite of packages by running `install.packages('tidyverse')` in the Console window (the bottom-left of the screen in R-Studio) as you'll end up using this all the time.\n\n## Using R\n\n### 'Base' R.\n\nCommands using R without needing any additional packages are often called 'base' R. Here are some important ones to know:\n\nYou can assign a value to an object using `=` or `<-`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx = 1\n\ny <- 4\n```\n:::\n\n\nEntering the name of a variable in the console and pressing return will return that value in the console. The same will happen if you enter it in a notebook cell (like here below), and run the cell. This is also true of any R object, such as a dataframe, vector, or list. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n:::\n\n\n\nYou can do basic calculations with `+`, `-`, `*` and `/`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx = 1+1\n\ny = 4 - 2\n\nz = x * y\n\nz\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n:::\n\n\nYou can compare numbers or variables using `==` (equals), `>` (greater than), `<`, (less than) `!=` (not equal to). These return either `TRUE` or `FALSE`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1 == 1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nx > y\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nx != z\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n### Basic R data structures\n\nIt is worth understanding the main types of data that you'll come across, in your environment window.\n\nA variable is a piece of data stored with a name, which can then be used for various purposes. The simplest of these are single **elements**, such as a number:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx = 1\n\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n:::\n\n\nNext is a vector. A vector is a list of **elements**. A vector is created with the command `c()`, with each item in the vector placed between the brackets, and followed by a comma. If your vector is a vector of words, the words need to be in inverted commas or quotation marks.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfruit = c(\"apples\", \"bananas\", \"oranges\", \"apples\")\ncolour = c(\"green\", \"yellow\", \"orange\", \"red\")\namount = c(2,5,10,8)\n```\n:::\n\n\nNext are dataframes. These are the spreadsheet-like objects, with rows and columns, which you'll use in most analyses.\n\nYou can create a dataframe using the `data.frame()` command. You just need to pass the function each of your vectors, which will become your columns.\n\nWe can also use the `glimpse()` or `str()` commands to view some basic information on the dataframe (particularly useful with longer data).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfruit_data = data.frame(fruit, colour, amount, stringsAsFactors = FALSE)\n\nstr(fruit_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t4 obs. of  3 variables:\n $ fruit : chr  \"apples\" \"bananas\" \"oranges\" \"apples\"\n $ colour: chr  \"green\" \"yellow\" \"orange\" \"red\"\n $ amount: num  2 5 10 8\n```\n:::\n:::\n\n\n### Data types\n\nNotice that to the right of the third column, the amount, has `<dbl>`under it, whereas the other two have <chr>\\`. That's because R is treating the third as a number and others as a string of characters. It's often important to know which data type your data is in: you can't do arithmetic on characters, for example. R has 6 data types:\n\n-   character\n-   numeric (real or decimal)\n-   integer\n-   logical\n-   complex\n-   Raw\n\nThe most commonly-used ones you'll come across are `character`, `numeric`, and `logical`. `logical` is data which is either `TRUE` or `FALSE`. In R, all the items in a vector are *coerced* to the same type. So if you try to make a vector with a combination of numbers and strings, the numbers will be converted to strings, as in the example below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfruit = c(\"apples\", 5, \"oranges\", 3)\n\nstr(fruit)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n chr [1:4] \"apples\" \"5\" \"oranges\" \"3\"\n```\n:::\n:::\n\n\n### Installing and loading packages:\n\nR is extended through the use of 'packages': pre-made sets of functions, usually with a particular task or theme in mind. To work with networks, for example, we'll use a set of third-party packages. If you complete the exercises using the CSC cloud notebooks, these are already installed for you in most cases. To install a package, use the command `install.packages()`, and include the package name within quotation marks:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages('igraph')\n```\n:::\n\n\nTo load a package, use the command `library()`. This time, the package name is not within quotation marks\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(igraph)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'igraph' was built under R version 4.0.5\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'igraph'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    decompose, spectrum\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:base':\n\n    union\n```\n:::\n:::\n\n\n\n## Tidyverse\n\nMost of the work in these notebooks is done using a set of packages developed for R called the 'tidyverse'. These enhance and improve a large range of R functions, with a more intuitive nicer syntax. It's really a bunch of individual packages for sorting, filtering and plotting data frames. They can be divided into a number of different categories.\n\nAll these functions work in the same way. The first argument is the thing you want to operate on. This is nearly always a data frame. After come other arguments, which are often specific columns, or certain variables you want to do something with.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\nHere are a couple of the most important ones\n\n### select(), pull()\n\n`select()` allows you to select columns. You can use names or numbers to pick the columns, and you can use a `-` sign to select everything *but* a given column.\n\nUsing the fruit data frame we created above: We can select just the fruit and colour columns:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(fruit_data, fruit, colour)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    fruit colour\n1  apples  green\n2 bananas yellow\n3 oranges orange\n4  apples    red\n```\n:::\n:::\n\n\nSelect everything but the colour column:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(fruit_data, -colour)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    fruit amount\n1  apples      2\n2 bananas      5\n3 oranges     10\n4  apples      8\n```\n:::\n:::\n\n\nSelect the first two columns:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(fruit_data, 1:2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    fruit colour\n1  apples  green\n2 bananas yellow\n3 oranges orange\n4  apples    red\n```\n:::\n:::\n\n\n### group_by(), tally(), summarise()\n\nThe next group of functions group things together and count them. Sounds boring but you would be amazed by how much of data science just seems to be doing those two things in various combinations.\n\n`group_by()` puts rows with the same value in a column of your dataframe into a group. Once they're in a group, you can count them or summarise them by another variable.\n\nFirst you need to create a new dataframe with the grouped fruit.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrouped_fruit = group_by(fruit_data, fruit)\n```\n:::\n\n\nNext we use `tally()`. This counts all the instances of each fruit group.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntally(grouped_fruit)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  fruit       n\n  <chr>   <int>\n1 apples      2\n2 bananas     1\n3 oranges     1\n```\n:::\n:::\n\n\nSee? Now the apples are grouped together rather than being two separate rows, and there's a new column called `n`, which contains the result of the count.\n\nIf we specify that we want to count by something else, we can add that in as a 'weight', by adding `wt =` as an argument in the function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntally(grouped_fruit, wt = amount)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  fruit       n\n  <chr>   <dbl>\n1 apples     10\n2 bananas     5\n3 oranges    10\n```\n:::\n:::\n\n\nThat counts the amounts of each fruit, ignoring the colour.\n\n### filter()\n\nAnother quite obviously useful function. This filters the dataframe based on a condition which you set within the function. The first argument is the data to be filtered. The second is a condition (or multiple condition). The function will return every row where that condition is true.\n\nJust red fruit:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(fruit_data, colour == 'red')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   fruit colour amount\n1 apples    red      8\n```\n:::\n:::\n\n\nJust fruit with at least 5 pieces:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(fruit_data, amount >=5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    fruit colour amount\n1 bananas yellow      5\n2 oranges orange     10\n3  apples    red      8\n```\n:::\n:::\n\n\nYou can also filter with multiple terms by using a vector (as above), and the special command `%in%`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(fruit_data, colour %in% c('red', 'green'))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   fruit colour amount\n1 apples  green      2\n2 apples    red      8\n```\n:::\n:::\n\n\n\n### slice_max(), slice_min()\n\nThese functions return the top or bottom number of rows, ordered by the data in a particular column. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nfruit_data %>% slice_max(order_by = amount, n = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    fruit colour amount\n1 oranges orange     10\n```\n:::\n\n```{.r .cell-code}\nfruit_data %>% slice_min(order_by = amount, n = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   fruit colour amount\n1 apples  green      2\n```\n:::\n:::\n\nThese can also be used with `group_by()`, to give the top rows for each group:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfruit_data %>% group_by(fruit) %>% slice_max(order_by = amount, n  =  1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 3\n# Groups:   fruit [3]\n  fruit   colour amount\n  <chr>   <chr>   <dbl>\n1 apples  red         8\n2 bananas yellow      5\n3 oranges orange     10\n```\n:::\n:::\n\n\nNotice it has kept only one row per fruit type, meaning it has kept only the apple row with the highest amount?\n\n\n### sort(), arrange()\n\nAnother useful set of functions, often you want to sort things. The function `arrange()` does this very nicely. You specify the data frame, and the variable you would like to sort by.\n\n\n::: {.cell}\n\n```{.r .cell-code}\narrange(fruit_data, amount)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    fruit colour amount\n1  apples  green      2\n2 bananas yellow      5\n3  apples    red      8\n4 oranges orange     10\n```\n:::\n:::\n\n\nSorting is ascending by default, but you can specify descending using `desc()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\narrange(fruit_data, desc(amount))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    fruit colour amount\n1 oranges orange     10\n2  apples    red      8\n3 bananas yellow      5\n4  apples  green      2\n```\n:::\n:::\n\n\nIf you \\`sort`arrange()` by a list of characters, you'll get alphabetical order:\n\n\n::: {.cell}\n\n```{.r .cell-code}\narrange(fruit_data, fruit)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    fruit colour amount\n1  apples  green      2\n2  apples    red      8\n3 bananas yellow      5\n4 oranges orange     10\n```\n:::\n:::\n\n\nYou can sort by multiple things:\n\n\n::: {.cell}\n\n```{.r .cell-code}\narrange(fruit_data, fruit, desc(amount))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    fruit colour amount\n1  apples    red      8\n2  apples  green      2\n3 bananas yellow      5\n4 oranges orange     10\n```\n:::\n:::\n\n\nNotice that now red apples are first.\n\n### left_join(), inner_join(), anti_join()\n\nAnother set of commands we'll use quite often in this course are the `join()` 'family'. Joins are a very powerful but simple way of selecting certain subsets of data, and adding information from multiple tables together.\n\nLet's make a second table of information giving the delivery day for each fruit type:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfruit_type = c('apples', 'bananas','oranges')\nweekday = c('Monday', 'Wednesday', 'Friday')\n\nfruit_days = data.frame(fruit_type, weekday, stringsAsFactors = FALSE)\n\nfruit_days\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  fruit_type   weekday\n1     apples    Monday\n2    bananas Wednesday\n3    oranges    Friday\n```\n:::\n:::\n\n\nThis can be 'joined' to the fruit information, to add the new data on the delivery day, without having to edit the original table (or repeat the information for apples twice). This is done using `left_join`.\n\nJoins need a common `key`, a column which allows the join to match the data tables up. It's important that these are unique (a person's name makes a bad key by itself, for example, because it's likely more than one person will share the same name). Usually, we use codes as the join keys. If the columns containing the join keys have different names (as ours do), specify them using the syntax below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\njoined_fruit = left_join(fruit_data, fruit_days, by = c(\"fruit\" = \"fruit_type\"))\n\njoined_fruit\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    fruit colour amount   weekday\n1  apples  green      2    Monday\n2 bananas yellow      5 Wednesday\n3 oranges orange     10    Friday\n4  apples    red      8    Monday\n```\n:::\n:::\n\n\nIn this new dataframe, the correct weekday is now listed beside the relevant fruit type.\n\n### Piping\n\nAnother useful feature of the tidyverse is that you can 'pipe' commands through a bunch of functions, making it easier to follow the logical order of the code. This means that you can do one operation, and pass the result to another operation. The previous dataframe is passed as the first argument of the next function by using the pipe `%>%` command. It works like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfruit_data %>% \n  filter(colour != 'yellow') %>% # remove any yellow colour fruit\n  group_by(fruit) %>% # group the fruit by type\n  tally(amount) %>% # count each group\n  arrange(desc(n)) # arrange in descending order of the count\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  fruit       n\n  <chr>   <dbl>\n1 apples     10\n2 oranges    10\n```\n:::\n:::\n\n\nThat code block, written in prose: \"take fruit data, remove any yellow colour fruit, count the fruits by type and amount, and arrange in descending order of the total\"\n\n### Plotting using ggplot()\n\nThe tidyverse includes a plotting library called `ggplot2`. To use it, first use the function `ggplot()` and specify the dataset you wish to graph using `data =`. Next, add what is known as a 'geom': a function which tells the package to represent the data using a particular geometric form (such as a bar, or a line). These functions begin with the standard form `geom_`.\n\nWithin this geom, you'll add 'aesthetics', which specify to the package which part of the data needs to be mapped to which particular element of the geom. The most common ones include `x` and `y` for the x and y axes, `color` or `fill` to map colors in your plot to particular data.\n\n`ggplot` is an advanced package with many options and extensions, which cannot be covered here.\n\nSome examples using the fruit data:\n\nBar chart of different types of fruit (one each of bananas and oranges, two types of apple)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = fruit_data) + geom_col(aes(x = fruit, y = amount))\n```\n\n::: {.cell-output-display}\n![](using-r-tidyverse_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\nCounting the total amount of fruit:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(fruit_data) + geom_col(aes(x = fruit, y = amount))\n```\n\n::: {.cell-output-display}\n![](using-r-tidyverse_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\nCharting amounts and fruit colours:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = fruit_data) + geom_bar(aes(x = fruit, weight = amount, fill = colour)) \n```\n\n::: {.cell-output-display}\n![](using-r-tidyverse_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\n## Reading in external data\n\nMost of the time, you'll be working with external data sources. These most commonly come in the form of comma separated values (.csv) or tab separated values (.tsv). The tidyverse commands to read these are `read_csv()` and `read_tsv`. You can also use `read_delim()`, and specify the type of delimited using `delim = ','` or `delim = '/t`. The path to the file is given as a string to the argument `file=`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf = read_csv(file = 'aus_titles.csv') # Read a .csv file as a network, specify the path to the file here.\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 2137 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): newspaper_title, state, place_id, place\ndbl (3): title_id, latitude, longitude\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2,137 × 7\n   title_id newspaper_title              state place_id place latitude longitude\n      <dbl> <chr>                        <chr> <chr>    <chr>    <dbl>     <dbl>\n 1      984 Adelaide Chronicle and Sout… SA    SA00558… Adel…    -34.9      139.\n 2      986 Adelaide Chronicle and Sout… SA    SA00558… Adel…    -34.9      139.\n 3      174 Adelaide Morning Chronicle … SA    SA00558… Adel…    -34.9      139.\n 4      821 Adelaide Observer (SA : 184… SA    SA00558… Adel…    -34.9      139.\n 5     1100 Adelaide Times (SA : 1848 -… SA    SA00558… Adel…    -34.9      139.\n 6      277 Adelaider Deutsche Zeitung … SA    SA00558… Adel…    -34.9      139.\n 7      434 Adelong and Tumut Express a… NSW   NSW81112 Adel…    -35.3      148.\n 8      434 Adelong and Tumut Express a… NSW   NSW60433 Tumb…    -35.8      148.\n 9      434 Adelong and Tumut Express a… NSW   NSW79906 Tumut    -35.3      148.\n10      625 Adelong and Tumut Express (… NSW   NSW81112 Adel…    -35.3      148.\n# ℹ 2,127 more rows\n```\n:::\n:::\n\n\nNotice that each column has a data type beside it, either <chr> for text or <dbl> for numbers. This is important if you want to sort or run calculations on the data.\n\n### Doing this with newspaper data\n\nLet's load a dataset of metadata for all the titles held by the library, and practise some counting and sorting on real-world data.\n\nDownload from here: [British Library Research Repository](https://doi.org/10.23636/1136)\n\nYou would need to extract into your project folder first, if you're following along:\n\n`read_csv` reads the csv from file.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntitle_list = read_csv('data/BritishAndIrishNewspapersTitleList_20191118.csv')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 24927 Columns: 24\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (18): publication_title, edition, preceding_titles, succeeding_titles, p...\ndbl  (6): title_id, nid, nlp, first_date_held, publication_date_one, publica...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\nSelect some particularly relevant columns:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntitle_list %>% \n  select(publication_title, \n         first_date_held, \n         last_date_held, \n         country_of_publication)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 24,927 × 4\n   publication_title       first_date_held last_date_held country_of_publication\n   <chr>                             <dbl> <chr>          <chr>                 \n 1 \"Corante, or, Newes fr…            1621 1621           The Netherlands       \n 2 \"Corante, or, Newes fr…            1621 1621           The Netherlands       \n 3 \"Corante, or, Newes fr…            1621 1621           The Netherlands       \n 4 \"Corante, or, Newes fr…            1621 1621           England               \n 5 \"Courant Newes out of …            1621 1621           The Netherlands       \n 6 \"A Relation of the lat…            1622 1622           England               \n 7 \"A Relation of the lat…            1622 1622           England               \n 8 \"A Relation of the lat…            1622 1622           England               \n 9 \"A Relation of the lat…            1622 1622           England               \n10 \"A Relation of the lat…            1622 1622           England               \n# ℹ 24,917 more rows\n```\n:::\n:::\n\n\nArrange in order of the latest date of publication, and then by the first date of publication:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntitle_list %>% \n  select(publication_title, \n         first_date_held, \n         last_date_held, \n         country_of_publication) %>%\n  arrange(desc(last_date_held), first_date_held)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 24,927 × 4\n   publication_title       first_date_held last_date_held country_of_publication\n   <chr>                             <dbl> <chr>          <chr>                 \n 1 Shrewsbury chronicle               1773 Continuing     England               \n 2 London times|The Times…            1788 Continuing     England               \n 3 Observer (London)|Obse…            1791 Continuing     England               \n 4 Limerick chronicle                 1800 Continuing     Ireland               \n 5 Hampshire chronicle|Th…            1816 Continuing     England               \n 6 The Inverness Courier,…            1817 Continuing     Scotland              \n 7 Sunday times (London)|…            1822 Continuing     England               \n 8 The Impartial Reporter…            1825 Continuing     Northern Ireland      \n 9 Impartial reporter and…            1825 Continuing     Northern Ireland      \n10 Aberdeen observer                  1829 Continuing     Scotland              \n# ℹ 24,917 more rows\n```\n:::\n:::\n\n\nGroup and count by country of publication:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntitle_list %>% \n  select(publication_title, \n         first_date_held, \n         last_date_held, \n         country_of_publication) %>%\n  arrange(desc(last_date_held)) %>% \n  group_by(country_of_publication) %>%\n  tally()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 40 × 2\n   country_of_publication               n\n   <chr>                            <int>\n 1 Bermuda Islands                     24\n 2 Cayman Islands                       1\n 3 England                          20465\n 4 England|Hong Kong                    1\n 5 England|India                        2\n 6 England|Iran                         2\n 7 England|Ireland                     10\n 8 England|Ireland|Northern Ireland    10\n 9 England|Jamaica                      7\n10 England|Malta                        2\n# ℹ 30 more rows\n```\n:::\n:::\n\n\nArrange again, this time in descending order of number of titles for each country:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntitle_list %>% \n  select(publication_title, \n         first_date_held, \n         last_date_held, \n         country_of_publication) %>%\n  arrange(desc(last_date_held)) %>% \n  group_by(country_of_publication) %>%\n  tally() %>%\n  arrange(desc(n))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 40 × 2\n   country_of_publication               n\n   <chr>                            <int>\n 1 England                          20465\n 2 Scotland                          1778\n 3 Ireland                           1050\n 4 Wales                             1019\n 5 Northern Ireland                   415\n 6 England|Wales                       58\n 7 Bermuda Islands                     24\n 8 England|Scotland                    13\n 9 England|Ireland                     10\n10 England|Ireland|Northern Ireland    10\n# ℹ 30 more rows\n```\n:::\n:::\n\n\nFilter only those with more than 100 titles:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntitle_list %>% \n  select(publication_title, \n         first_date_held, \n         last_date_held, \n         country_of_publication) %>%\n  arrange(desc(last_date_held)) %>% \n  group_by(country_of_publication) %>%\n  tally() %>%\n  arrange(desc(n)) %>% \n  filter(n>=100)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 2\n  country_of_publication     n\n  <chr>                  <int>\n1 England                20465\n2 Scotland                1778\n3 Ireland                 1050\n4 Wales                   1019\n5 Northern Ireland         415\n```\n:::\n:::\n\n\nMake a simple bar chart:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntitle_list %>% \n  select(publication_title, \n         first_date_held, \n         last_date_held, \n         country_of_publication) %>%\n  arrange(desc(last_date_held)) %>% \n  group_by(country_of_publication) %>%\n  tally() %>%\n  arrange(desc(n)) %>% \n  filter(n>=100) %>% \n  ggplot() + \n  geom_bar(aes(x = country_of_publication, weight = n))\n```\n\n::: {.cell-output-display}\n![barchart](using-r-tidyverse_files/figure-html/unnamed-chunk-40-1.png){width=672}\n:::\n:::\n\n\n## Recommended Reading\n\nThis has been a very quick introduction to R. There are lots of resources available to learn more, including:\n\n[R-studio cheat sheets](https://www.rstudio.com/resources/cheatsheets/)\n\n[The Pirate's Guide to R, a good beginners guide to base R](https://bookdown.org/ndphillips/YaRrr/)\n\n[R for data science, which teaches the tidyverse in detail](https://r4ds.had.co.nz)\n\n[Learn how to make a book like this using Bookdown](https://bookdown.org/yihui/bookdown/introduction.html)\n",
    "supporting": [
      "using-r-tidyverse_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}